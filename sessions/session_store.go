package sessions

import (
	"context"
	"encoding/base64"
	"fmt"
	"net/http"

	"github.com/gorilla/sessions"
)

var sessionStore *sessions.CookieStore

type sessionStorer struct {
	w       http.ResponseWriter
	r       *http.Request
	session *sessions.Session
}

type SessionConfig struct {
	Name   string
	Key    string
	MaxAge int
	Secure bool
}

var config *SessionConfig

func setupSessionStore() {
	sessionStoreKey, err := base64.StdEncoding.DecodeString(config.Key)
	if err != nil {
		panic(err)
	}
	sessionStore = sessions.NewCookieStore(sessionStoreKey)

	sessionStore.Options.HttpOnly = true
	sessionStore.Options.Secure = config.Secure
	if config.MaxAge != 0 {
		sessionStore.MaxAge(config.MaxAge)
	}
}

type sessionContextKey int

const storeCtxKey sessionContextKey = 0

// GenerateSessionStore GenerateSessionStore middleware generate session store for the whole request lifetime.
// later session operations should call `GenerateSessionStore` to get the generated session store
func GenerateSessionStore(conf *SessionConfig) func(http.Handler) http.Handler {
	config = conf
	setupSessionStore()

	return func(h http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			st := newSessionStore(w, r)
			// Record session storer in context
			ctx := context.WithValue(r.Context(), storeCtxKey, st)

			r = r.WithContext(ctx)

			h.ServeHTTP(w, r)
		})
	}
}
func newSessionStore(w http.ResponseWriter, r *http.Request) *sessionStorer {
	se, _ := sessionStore.Get(r, config.Name)

	return &sessionStorer{w, r, se}
}

// GetSessionStorer GetSessionStorer fetch the sessionStore generated by GenerateSessionStorer
func GetSessionStore(w http.ResponseWriter, r *http.Request) *sessionStorer {
	if st, ok := r.Context().Value(storeCtxKey).(*sessionStorer); ok {
		return st
	}

	panic("Cannot get session storer in the request, please make sure the SessionStorerMiddleware has been executed.")
}

func (s sessionStorer) Get(key string) (string, bool) {
	session, err := sessionStore.Get(s.r, config.Name)
	if err != nil {
		fmt.Println(err)
		return "", false
	}

	strInf, ok := session.Values[key]
	if !ok {
		return "", false
	}

	str, ok := strInf.(string)
	if !ok {
		return "", false
	}

	return str, true
}

func (s sessionStorer) Put(key, value string) {
	session, err := sessionStore.Get(s.r, config.Name)
	if err != nil {
		fmt.Println(err)
		return
	}

	session.Values[key] = value
	session.Save(s.r, s.w)
}

func (s sessionStorer) Del(key string) {
	session, err := sessionStore.Get(s.r, config.Name)
	if err != nil {
		fmt.Println(err)
		return
	}

	delete(session.Values, key)
	session.Save(s.r, s.w)
}
